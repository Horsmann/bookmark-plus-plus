package org.eclipselabs.recommenders.bookmark.tests;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.eclipselabs.recommenders.bookmark.tree.BMNode;
import org.eclipselabs.recommenders.bookmark.tree.persistent.GsonConverter;
import org.eclipselabs.recommenders.bookmark.tree.persistent.deserialization.RestoredTree;
import org.eclipselabs.recommenders.bookmark.tree.persistent.deserialization.TreeDeserializer;
import org.eclipselabs.recommenders.bookmark.tree.persistent.deserialization.TreeDeserializerFacade;
import org.eclipselabs.recommenders.bookmark.tree.util.TreeUtil;
import org.junit.Test;

public class TreeDeserializerTest
{
	String serializedTree = "{\"isExpanded\":false,\"children\":[{\"isExpanded\":true,\"children\":[{\"isExpanded\":true,\"children\":[{\"isExpanded\":true,\"children\":[{\"isExpanded\":false,\"children\":[],\"value\":\"\u003dLKJLD/src\u003ctest.project{MyEnum.java[MyEnum^SATURDAY\",\"isBookmarkNode\":false,\"isAutoGenerated\":false}],\"value\":\"\u003dLKJLD/src\u003ctest.project{MyEnum.java[MyEnum\",\"isBookmarkNode\":false,\"isAutoGenerated\":true}],\"value\":\"\u003dLKJLD/src\u003ctest.project{MyEnum.java\",\"isBookmarkNode\":false,\"isAutoGenerated\":true},{\"isExpanded\":false,\"children\":[],\"value\":\"../LKJLD/testfile.txt\",\"isBookmarkNode\":false,\"isAutoGenerated\":false}],\"value\":\"oben\",\"isBookmarkNode\":true,\"isAutoGenerated\":true}],\"value\":\"\",\"isBookmarkNode\":false,\"isAutoGenerated\":true}";

	@Test
	public void testDeserialization()
	{
		RestoredTree restoredTree = TreeDeserializer.deSerializeTree(
				serializedTree, new GsonConverter());

		BMNode root = restoredTree.getRoot();
		assertEquals(1, root.getChildren().length);
		assertFalse(root.getChildren()[0].showInFlatModus());

		BMNode bookmark = root.getChildren()[0];
		assertTrue(bookmark.isBookmarkNode());
		assertEquals(2, bookmark.getChildren().length);

		BMNode leaf = TreeUtil.getLeafOfTreePath(bookmark.getChildren()[0]);
		assertFalse(leaf.showInFlatModus());

		leaf = bookmark.getChildren()[1];
		assertFalse(leaf.showInFlatModus());

		BMNode[] expanded = restoredTree.getExpanded();
		assertEquals(3, expanded.length);
	}

	@Test
	public void testDeserializationFacade()
	{
		RestoredTree restoredTree = TreeDeserializerFacade
				.deserialize(serializedTree);

		BMNode root = restoredTree.getRoot();
		assertEquals(1, root.getChildren().length);
		assertFalse(root.getChildren()[0].showInFlatModus());

		BMNode bookmark = root.getChildren()[0];
		assertTrue(bookmark.isBookmarkNode());
		assertEquals(2, bookmark.getChildren().length);

		BMNode leaf = TreeUtil.getLeafOfTreePath(bookmark.getChildren()[0]);
		assertFalse(leaf.showInFlatModus());

		leaf = bookmark.getChildren()[1];
		assertFalse(leaf.showInFlatModus());

		BMNode[] expanded = restoredTree.getExpanded();
		assertEquals(3, expanded.length);
	}

	// @Test
	// public void testTreeDeserializerFacadeExpandNodes()
	// {
	//
	// TreeViewer viewer = prepareViewer();
	// BMNode[] expanded = getExpanded();
	//
	// TreeDeserializerFacade.setExpandedNodesForView(viewer, expanded);
	//
	// viewer.getTree().update();
	// viewer.refresh(true);
	//
	// Object[] actuallyExpanded = viewer.getExpandedElements();
	// assertEquals(expanded.length, actuallyExpanded.length);
	//
	// }
	//
	// private BMNode[] getExpanded()
	// {
	// RestoredTree restoredTree = TreeDeserializerFacade
	// .deserialize(serializedTree);
	//
	// BMNode[] expanded = restoredTree.getExpanded();
	//
	// return expanded;
	// }
	//
	// private TreeViewer prepareViewer()
	// {
	// TreeViewer viewer = getViewer();
	//
	// RestoredTree restoredTree = TreeDeserializerFacade
	// .deserialize(serializedTree);
	//
	// viewer.setContentProvider(new TreeContentProvider());
	// viewer.setInput(restoredTree.getRoot());
	//
	// return viewer;
	// }
	//
	// private TreeViewer getViewer()
	// {
	// Display display = Display.getCurrent();
	// TreeViewer viewer = new TreeViewer(display.getActiveShell());
	// return viewer;
	// }

}
